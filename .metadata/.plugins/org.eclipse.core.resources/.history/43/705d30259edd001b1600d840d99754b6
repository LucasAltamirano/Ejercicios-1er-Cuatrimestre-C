#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "LinkedList.h"
#include "Libros.h"
#include "parser.h"
#include "Genericas.h"

/** \brief Carga los datos de los empleados desde el archivo ingresado por el usuario (modo texto).
 *
 * \param pArrayListaLibros LinkedList*
 * \return int
 *
 */
int controller_loadFromText(LinkedList *pArrayListaLibros) {
	int E = 0;
	char archivo[25];
	ll_clear(pArrayListaLibros);

	FILE *punteroFileTexto;


	levantaArchivos(archivo, "Ingrese nombre de archivo (Datos.csv)", "Error,Verifique", 25);
	punteroFileTexto = fopen(archivo, "r");

	if (punteroFileTexto != NULL) {


		parser_LibrosFromText(punteroFileTexto, pArrayListaLibros);

		fclose(punteroFileTexto);
		E = 1;

	}
	return E;
}
/** \brief Ordena los  libros
 *
 * \param path char*
 * \param pArrayListaLibros LinkedList*
 * \return int
 *
 */
int controller_sortLibros(LinkedList *pArrayListaLibros) {
	int E=0;

	if(pArrayListaLibros!=NULL){

		if(!ll_sort(pArrayListaLibros, ordenarporAutor,1)){
			E=1;
		}
				//if(negado cunado devuelve cero;
	}

		return E;
	}
/** \brief Listar la lista de libros que recibe
 *
 * \param pArrayListaLibros LinkedList*
 * \return int
 *
 */
int controller_ListLibros(LinkedList *pArrayListaLibros){
	int E=0;
	int largoDeLista;
	int i;
	// auxiliares impresiones
	int imprId;
	char imprTitulo[128];
	char imprAutor[128];
	int imprPrecio;
	char imprEditorial[128];

	int idConvertir;

	if(pArrayListaLibros!=NULL){

		largoDeLista=ll_len(pArrayListaLibros);
		if(largoDeLista>0){
			E=1;
printf(
			"\n\t        |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n"
						"\t	||||                      Mi Bibilioteca                           ||||\n"
						"\t	|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n");
			printf("\n|%s|%50s |%16s | %s |%18s |","ID"," TITULO  "
					"                    "," AUTOR     "," PRECIO ","EDITORIAL    ");
			for (i = 0; i < largoDeLista; i++) {
							eLibro* auxPrintLibros = ll_get(pArrayListaLibros, i);

							libros_getId(auxPrintLibros,& imprId);
							libros_GetTitulos(auxPrintLibros, imprTitulo);
							libros_GetAutor(auxPrintLibros, imprAutor);
							libros_GetPrecio(auxPrintLibros, &imprPrecio);
							libros_GetIdEditorial(auxPrintLibros, &idConvertir);
							convertidorDeEnteroaChar(idConvertir, imprEditorial);
							printf("\n|%2d|%50s |%16s | %8d |%18s |",imprId,imprTitulo,imprAutor,imprPrecio,imprEditorial);
				}
		}
	}
	return E;
}
/** \brief Guarda los datos de los libros en el archivo mapeado.csv (modo texto).el cual es harcodeado.
 * abriendolo en modo w , para porteriormente cerrar dicho archivo
 *
 * \param path char*
 * \param pArrayListaLibros LinkedList*
 * \return int
 *
 */
int controller_saveAsText(char *path, LinkedList *pArrayListaLibros) {

		FILE *punteroFileTexto;
		eLibro *punteroBuffer;
		int cantNodos;
		int i;
		int bufferId;
		char bufferTitulo[128];
		char bufferAutor[128];
		int bufferPrecio;
		int bufferidEditorial;
		char auxDescripcion[128];

		int E = 0;

		punteroFileTexto = fopen(path, "w");
		cantNodos = ll_len(pArrayListaLibros);

		if (punteroFileTexto != NULL
				&& cantNodos > 0&& pArrayListaLibros!=NULL && path!=NULL) {
			E = 1;
			fprintf(punteroFileTexto, "Id,Titulo,Autor,Precio,IdEditorial\n");
			for (i = 0; i < cantNodos; i++) {

				punteroBuffer = ll_get(pArrayListaLibros, i);

				libros_getId(punteroBuffer, &bufferId);
				libros_GetTitulos(punteroBuffer, bufferTitulo);
				libros_GetAutor(punteroBuffer, bufferAutor);
				libros_GetPrecio(punteroBuffer,&bufferPrecio);
				libros_GetIdEditorial(punteroBuffer,&bufferidEditorial);
				convertidorDeEnteroaChar(bufferidEditorial,auxDescripcion);

				fprintf(punteroFileTexto,"%d,%s,%s,%d,%s\n",bufferId,bufferTitulo,bufferAutor,bufferPrecio,auxDescripcion);

			}
			fclose(punteroFileTexto);
		}
		return E;
	}
/** \brief crea una nueva copia los datos de los libros en el archivo mapeado.csv (modo texto).
 * con los descuentos splicados segun las indicaciones del cliente
 * abriendolo en modo w , para porteriormente cerrar dicho archivo
 *
 * \param path char*
 * \param pArrayListaLibros LinkedList*
 * \return int
 *
 */
int controller_llmap(LinkedList* pArrayListaLibros){
	int E=0;
	LinkedList* devolucionMap;
	if(pArrayListaLibros!=NULL){

		devolucionMap=ll_map(pArrayListaLibros, aplicoDescuento);
		controller_saveAsText("mapeado.csv", devolucionMap);
		E=1;
	}
		free(devolucionMap);

	return E;
}



